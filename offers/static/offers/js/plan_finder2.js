// Generated by CoffeeScript 1.6.3
(function() {
  var currentRequest, makePagination, min_max_fields, multi_fields, ordering, setupInputTriggers;

  ordering = $("order fields");

  multi_fields = [
    {
      selector: $("#countrySelect"),
      api: "location__country"
    }, {
      selector: $("#providerSelect"),
      api: "offer__provider__id"
    }, {
      selector: $("#billingSelect"),
      api: "billing_time"
    }, {
      selector: $("#datacenterSelect"),
      api: "location__datacenter__id"
    }, {
      selector: $("#serverTypeSelect"),
      api: "server_type"
    }
  ];

  min_max_fields = [
    {
      minField: $("#planMemMin"),
      maxField: $("#planMemMax"),
      api: 'memory'
    }, {
      minField: $("#planHDDMin"),
      maxField: $("#planHDDMax"),
      api: "disk_space"
    }, {
      minField: $("#planBandMin"),
      maxField: $("#planBandMax"),
      api: 'bandwidth'
    }, {
      minField: $("#planIPv4Min"),
      maxField: $("#planIPv4Max"),
      api: 'ipv4_space'
    }, {
      minField: $("#planIPv6Min"),
      maxField: $("#planIPv6Max"),
      api: 'ipv6_space'
    }, {
      minField: $("#planCoreMin"),
      maxField: $("#planCoreMax"),
      api: 'cpu_cores'
    }, {
      minField: $("#planCostMin"),
      maxField: $("#planCostMax"),
      api: 'cost'
    }
  ];

  /* Main logic*/


  currentRequest = null;

  setupInputTriggers = function() {
    var min_max, select_field, _i, _j, _len, _len1, _results;
    for (_i = 0, _len = multi_fields.length; _i < _len; _i++) {
      select_field = multi_fields[_i];
      select_field.selector.change(filterPlans);
    }
    _results = [];
    for (_j = 0, _len1 = min_max_fields.length; _j < _len1; _j++) {
      min_max = min_max_fields[_j];
      min_max.minField.on('input', filterPlans);
      _results.push(min_max.maxField.on('input', filterPlans));
    }
    return _results;
  };

  setupInputTriggers();

  makePagination = function(meta_data) {
    var current_page, next_data, next_disabled, previous_data, previous_disabled, total_pages;
    previous_disabled = '';
    previous_data = '';
    next_disabled = '';
    next_data = '';
    total_pages = Math.ceil(meta_data.total_count / meta_data.limit);
    current_page = Math.ceil(meta_data.offset / meta_data.limit) + 1;
    if (meta_data.previous === null) {
      previous_disabled = 'disabled';
    } else {
      previous_data = meta_data.previous;
    }
    if (meta_data.next === null) {
      next_disabled = 'disabled';
    } else {
      next_data = meta_data.next;
    }
    return "<ul class='pagination'>\n  <li class='" + previous_disabled + "'>\n    <a onclick='paginationNavigate(\"" + previous_data + "\")'>&laquo;</a>\n  </li>\n  <li><a>Page " + current_page + " of " + total_pages + "</a></li>\n  <li class='" + next_disabled + "'>\n    <a onclick='paginationNavigate(\"" + next_data + "\")'>&raquo;</a>\n  </li>\n</ul>";
  };

}).call(this);
