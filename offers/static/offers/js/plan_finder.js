// Generated by CoffeeScript 1.6.3
(function() {
  var PlanFinder;

  PlanFinder = (function() {
    var currentRequest, filterPlans, getAndRender, makePagination, min_max_fields, multi_fields, ordering, paginationNavigate, setupInputTriggers;

    function PlanFinder() {}

    ordering = $("#orderingSelect");

    multi_fields = [
      {
        selector: $("#countrySelect"),
        api: "location__country"
      }, {
        selector: $("#providerSelect"),
        api: "offer__provider__id"
      }, {
        selector: $("#billingSelect"),
        api: "billing_time"
      }, {
        selector: $("#datacenterSelect"),
        api: "location__datacenter__id"
      }, {
        selector: $("#serverTypeSelect"),
        api: "server_type"
      }
    ];

    min_max_fields = [
      {
        minField: $("#planMemMin"),
        maxField: $("#planMemMax"),
        api: 'memory'
      }, {
        minField: $("#planHDDMin"),
        maxField: $("#planHDDMax"),
        api: "disk_space"
      }, {
        minField: $("#planBandMin"),
        maxField: $("#planBandMax"),
        api: 'bandwidth'
      }, {
        minField: $("#planIPv4Min"),
        maxField: $("#planIPv4Max"),
        api: 'ipv4_space'
      }, {
        minField: $("#planIPv6Min"),
        maxField: $("#planIPv6Max"),
        api: 'ipv6_space'
      }, {
        minField: $("#planCoreMin"),
        maxField: $("#planCoreMax"),
        api: 'cpu_cores'
      }, {
        minField: $("#planCostMin"),
        maxField: $("#planCostMax"),
        api: 'cost'
      }
    ];

    /* Main logic*/


    currentRequest = null;

    setupInputTriggers = function() {
      var min_max, select_field, _i, _j, _len, _len1, _results;
      for (_i = 0, _len = multi_fields.length; _i < _len; _i++) {
        select_field = multi_fields[_i];
        select_field.selector.change(filterPlans);
      }
      _results = [];
      for (_j = 0, _len1 = min_max_fields.length; _j < _len1; _j++) {
        min_max = min_max_fields[_j];
        min_max.minField.on('input', filterPlans);
        _results.push(min_max.maxField.on('input', filterPlans));
      }
      return _results;
    };

    setupInputTriggers();

    makePagination = function(meta_data, endpoint) {
      var current_page, next_data, next_disabled, previous_data, previous_disabled, total_pages;
      previous_disabled = '';
      previous_data = '';
      next_disabled = '';
      next_data = '';
      total_pages = Math.ceil(meta_data.total_count / meta_data.limit);
      current_page = Math.ceil(meta_data.offset / meta_data.limit) + 1;
      if (meta_data.previous === null) {
        previous_disabled = 'disabled';
      } else {
        previous_data = meta_data.previous;
      }
      if (meta_data.next === null) {
        next_disabled = 'disabled';
      } else {
        next_data = meta_data.next;
      }
      endpoint.append("<ul class='pagination'>\n  <li class='" + previous_disabled + "'>\n    <a id='plan-finder-prev'>&laquo;</a>\n  </li>\n  <li><a>Page " + current_page + " of " + total_pages + "</a></li>\n  <li class='" + next_disabled + "'>\n    <a id='plan-finder-next'>&raquo;</a>\n  </li>\n</ul>");
      $("#plan-finder-prev").click(function() {
        return paginationNavigate(previous_data);
      });
      $("#plan-finder-next").click(function() {
        return paginationNavigate(next_data);
      });
    };

    paginationNavigate = function(url) {
      if (url.length > 0) {
        return getAndRender(url);
      }
    };

    getAndRender = function(url) {
      var endpoint_data;
      endpoint_data = $("#plan_list");
      endpoint_data.html('<div class="ajax-loading"></div>');
      currentRequest = $.get(url, function(data) {
        var plan, _i, _len, _ref;
        endpoint_data.html("");
        if (data.meta.total_count === 0) {
          endpoint_data.html("No plans with your filtering found!");
          return;
        }
        _ref = data["objects"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          plan = _ref[_i];
          endpoint_data.append(plan.html);
        }
        makePagination(data["meta"], endpoint_data);
      }).fail(function() {
        endpoint_data.html("There were errors in your filtering. Please check that you did not enter letters or punctuation in the\nnumerically filtered fields.");
      });
    };

    filterPlans = function() {
      var error, min_max, select_field, urlOptions, urlParameters, _i, _j, _len, _len1;
      urlOptions = {
        limit: 3,
        format: "json"
      };
      try {
        currentRequest.abort();
      } catch (_error) {
        error = _error;
      }
      for (_i = 0, _len = multi_fields.length; _i < _len; _i++) {
        select_field = multi_fields[_i];
        if (select_field.selector.val() !== null) {
          urlOptions[select_field.api + "__in"] = select_field.selector.val().join(',');
        }
      }
      for (_j = 0, _len1 = min_max_fields.length; _j < _len1; _j++) {
        min_max = min_max_fields[_j];
        if (min_max.minField.val().length > 0) {
          urlOptions[min_max.api + '__gte'] = min_max.minField.val();
        }
        if (min_max.maxField.val().length > 0) {
          urlOptions[min_max.api + '__lte'] = min_max.maxField.val();
        }
      }
      if (ordering.val() !== "ALL") {
        console.log(ordering.val());
        urlOptions["order_by"] = ordering.val();
      }
      urlParameters = $.param(urlOptions);
      getAndRender('/find/data/main/plan/?' + urlParameters);
    };

    $(document).ready(filterPlans);

    $("#filter-plans-btn").on('click', filterPlans);

    return PlanFinder;

  })();

}).call(this);
